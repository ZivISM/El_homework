pipeline {
    agent any
    
    parameters {
        string(name: 'DOCKER_HUB_USERNAME', defaultValue: 'zivism', description: 'Docker Hub username')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Prepare for Testing') {
            steps {
                // Pull the latest images
                sh "docker pull ${params.DOCKER_HUB_USERNAME}/docker-monitor:latest"
                sh "docker pull ${params.DOCKER_HUB_USERNAME}/nginx-proxy:latest"
                
                // Create network
                sh "docker network create --driver bridge test-network || true"
                
                // Run Docker Monitor container
                sh """
                docker run -d --name integration-docker-monitor \\
                  --network test-network \\
                  -v /var/run/docker.sock:/var/run/docker.sock \\
                  ${params.DOCKER_HUB_USERNAME}/docker-monitor:latest
                """
                
                // Run Nginx Proxy container 
                sh """
                docker run -d --name integration-nginx-proxy \\
                  --network test-network \\
                  ${params.DOCKER_HUB_USERNAME}/nginx-proxy:latest
                """
                
                // Wait for containers to start
                sleep(time: 5, unit: 'SECONDS')
                
                // Check if containers are running
                sh """
                echo "Checking container status:"
                docker ps -a
                
                echo "Docker Monitor logs:"
                docker logs integration-docker-monitor
                
                echo "Nginx Proxy logs:"
                docker logs integration-nginx-proxy
                """
                
                // Check if the Nginx container is running before proceeding
                def nginxRunning = sh(
                    script: "docker inspect -f '{{.State.Running}}' integration-nginx-proxy",
                    returnStdout: true
                ).trim()
                
                if (nginxRunning != "true") {
                    error "Nginx container is not running. Cannot proceed with tests."
                }
                
                // Install curl in the Nginx container (Alpine based)
                sh """
                docker exec integration-nginx-proxy apk add --no-cache curl
                """
                
                // Install curl in the Docker Monitor container
                sh """
                docker exec integration-docker-monitor apt-get update && apt-get install -y curl
                """
            }
        }
        
        stage('Test Integration') {
            steps {
                script {
                    // Verify containers are running
                    sh "docker ps -a --format '{{.Names}} - {{.Status}}' | grep integration"
                    
                    // Test the Nginx proxy by curling through it to the Docker Monitor app
                    def proxyResponse = sh(
                        script: "docker exec integration-docker-monitor curl -s -o /dev/null -w '%{http_code}' http://integration-nginx-proxy:80 || echo 'Failed with exit code \$?'",
                        returnStdout: true
                    ).trim()
                    
                    echo "Proxy response code: ${proxyResponse}"
                    
                    if (proxyResponse == "200") {
                        echo "Integration test passed! Nginx proxy is correctly forwarding to Docker Monitor."
                        
                        // Check if the X-Source-IP header is being added
                        def responseHeaders = sh(
                            script: "docker exec integration-docker-monitor curl -s -D - http://integration-nginx-proxy:80 | grep -i 'X-Source-IP' || echo 'Header not found'",
                            returnStdout: true
                        ).trim()
                        
                        echo "Response headers: ${responseHeaders}"
                        
                        if (responseHeaders && responseHeaders != "Header not found") {
                            echo "X-Source-IP header found: ${responseHeaders}"
                            echo "All tests passed successfully!"
                        } else {
                            echo "X-Source-IP header test failed - checking nginx logs"
                            sh "docker logs integration-nginx-proxy"
                            error "X-Source-IP header not found in response. Integration test failed."
                        }
                    } else {
                        echo "Proxy test failed - checking container logs"
                        sh "docker logs integration-docker-monitor"
                        sh "docker logs integration-nginx-proxy"
                        error "Integration test failed! Received HTTP ${proxyResponse} response."
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh "docker stop integration-docker-monitor integration-nginx-proxy || true"
            sh "docker rm integration-docker-monitor integration-nginx-proxy || true"
            sh "docker network rm test-network || true"
            cleanWs()
        }
        success {
            echo 'Integration test completed successfully'
        }
        failure {
            echo 'Integration test failed'
        }
    }
} 