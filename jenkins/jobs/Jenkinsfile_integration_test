pipeline {
    agent any
    
    parameters {
        string(name: 'DOCKER_HUB_USERNAME', defaultValue: 'zivism', description: 'Docker Hub username')
        string(name: 'LOCAL_PORT', defaultValue: '8080', description: 'Local port to expose Nginx proxy on')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Prepare for Testing') {
            steps {
                script {
                    // Pull the latest images
                    docker.image("${params.DOCKER_HUB_USERNAME}/docker-monitor:latest").pull()
                    docker.image("${params.DOCKER_HUB_USERNAME}/nginx-proxy:latest").pull()
                    
                    // Create network
                    sh "docker network create --driver bridge test-network || true"
                    
                    // Run Docker Monitor container
                    sh """
                    docker run -d --name integration-docker-monitor \
                      --network test-network \
                      -v /var/run/docker.sock:/var/run/docker.sock \
                      ${params.DOCKER_HUB_USERNAME}/docker-monitor:latest
                    """
                    
                    // Run Nginx Proxy container
                    sh """
                    docker run -d --name integration-nginx-proxy \
                      --network test-network \
                      -p ${params.LOCAL_PORT}:80 \
                      ${params.DOCKER_HUB_USERNAME}/nginx-proxy:latest
                    """
                    
                    // Wait for containers to start
                    sleep(time: 10, unit: 'SECONDS')
                }
            }
        }
        
        stage('Test Integration') {
            steps {
                script {
                    def responseCode = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:${params.LOCAL_PORT}",
                        returnStdout: true
                    ).trim()
                    
                    if (responseCode == "200") {
                        echo "Integration test passed! Received HTTP 200 OK response."
                        
                        // Also check if the X-Source-IP header is being added
                        def responseHeaders = sh(
                            script: "curl -s -D - http://localhost:${params.LOCAL_PORT} -o /dev/null | grep -i 'X-Source-IP'",
                            returnStdout: true
                        ).trim()
                        
                        if (responseHeaders) {
                            echo "X-Source-IP header found: ${responseHeaders}"
                            echo "All tests passed successfully!"
                        } else {
                            error "X-Source-IP header not found in response. Integration test failed."
                        }
                    } else {
                        error "Integration test failed! Received HTTP ${responseCode} response."
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh "docker stop integration-docker-monitor integration-nginx-proxy || true"
                sh "docker rm integration-docker-monitor integration-nginx-proxy || true"
                sh "docker network rm test-network || true"
            }
            cleanWs()
        }
        success {
            echo 'Integration test completed successfully'
        }
        failure {
            echo 'Integration test failed'
        }
    }
} 