pipeline {
    agent any
    
    parameters {
        string(name: 'DOCKER_HUB_USERNAME', defaultValue: 'zivism', description: 'Docker Hub username')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Prepare for Testing') {
            steps {
                // Pull the latest images
                sh "docker pull ${params.DOCKER_HUB_USERNAME}/docker-monitor:latest"
                sh "docker pull ${params.DOCKER_HUB_USERNAME}/nginx-proxy:latest"
                
                // Create network
                sh "docker network create --driver bridge test-network || true"
                
                // Run Docker Monitor container
                sh """
                docker run -d --name integration-docker-monitor \\
                  --network test-network \\
                  -v /var/run/docker.sock:/var/run/docker.sock \\
                  ${params.DOCKER_HUB_USERNAME}/docker-monitor:latest
                """
                
                // Run Nginx Proxy container without exposing external port 
                sh """
                docker run -d --name integration-nginx-proxy \\
                  --network test-network \\
                  ${params.DOCKER_HUB_USERNAME}/nginx-proxy:latest
                """
                
                // Wait for containers to start
                sleep(time: 10, unit: 'SECONDS')
            }
        }
        
        stage('Test Integration') {
            steps {
                script {
                    // Get the container's IP address 
                    def nginxIp = sh(
                        script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' integration-nginx-proxy",
                        returnStdout: true
                    ).trim()
                    
                    echo "Nginx container IP: ${nginxIp}"
                    
                    // Get the docker monitor container's IP address for debugging
                    def monitorIp = sh(
                        script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' integration-docker-monitor",
                        returnStdout: true
                    ).trim()
                    
                    echo "Docker Monitor container IP: ${monitorIp}"
                    
                    // Run curl from inside the Docker network using docker exec
                    def responseCode = sh(
                        script: "docker exec integration-nginx-proxy curl -s -o /dev/null -w '%{http_code}' http://integration-docker-monitor:5000 || echo 'Failed with exit code \$?'",
                        returnStdout: true
                    ).trim()
                    
                    echo "Response code: ${responseCode}"
                    
                    if (responseCode == "200") {
                        echo "Integration test passed! Received HTTP 200 OK response."
                        
                        // Check if the proxy is correctly adding headers by examining headers from inside Docker network
                        def responseHeaders = sh(
                            script: "docker exec integration-nginx-proxy curl -s -D - http://integration-docker-monitor:5000 -o /dev/null | grep -i 'X-Source-IP' || echo 'Header not found'",
                            returnStdout: true
                        ).trim()
                        
                        echo "Response headers: ${responseHeaders}"
                        
                        // Now test the proxy itself
                        def proxyResponse = sh(
                            script: "docker exec integration-docker-monitor curl -s -o /dev/null -w '%{http_code}' http://integration-nginx-proxy:80 || echo 'Failed with exit code \$?'",
                            returnStdout: true
                        ).trim()
                        
                        echo "Proxy response code: ${proxyResponse}"
                        
                        if (proxyResponse == "200") {
                            echo "Proxy test passed! Received HTTP 200 OK response."
                            echo "All tests passed successfully!"
                        } else {
                            error "Proxy test failed! Received HTTP ${proxyResponse} response."
                        }
                    } else {
                        error "Integration test failed! Received HTTP ${responseCode} response."
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh "docker stop integration-docker-monitor integration-nginx-proxy || true"
            sh "docker rm integration-docker-monitor integration-nginx-proxy || true"
            sh "docker network rm test-network || true"
            cleanWs()
        }
        success {
            echo 'Integration test completed successfully'
        }
        failure {
            echo 'Integration test failed'
        }
    }
} 